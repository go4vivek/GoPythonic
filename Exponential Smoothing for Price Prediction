import csv
import sys
import os
import matplotlib.pyplot as plt
ls1=[]  #This list will store the first column
ls2=[]  #This list will store the second column 
smooth=[]    #This list will store the smoothened prices
agree="yes"   #Variable which acts as a marker whether the user finds the model appropriate
alpha=float(raw_input("Enter Alpha\n")) #Alpha input for finding out the damping factor

def csv_reader(file_obj):
    reader = csv.reader(file_obj)
    for row in reader:
        ls1.append(row[0])
        ls2.append(row[1])
       
#This function generates the graph of time and price. Also it checks with the user if the model seems appropriate ###

def draw_graph(ls1,ls2,expl_smooth,alpha,agree):
    while agree=="yes":
        plt.figure()
        #plt.show()
        message="Exponentially smoothened Stock Price Plot for Alpha"+ " "+str(alpha)
        plt.plot(ls1,ls2,label="Original Stock Price Plot",linewidth=2, markersize=12)
        plt.plot(ls1,expl_smooth,label=message,linewidth=2, markersize=12)
        plt.xlabel('Time Period')
        plt.ylabel('Prices')
        plt.title('Original and exponentially smoothen prices')
        plt.legend()
        plt.show()
        ## The program asks the user for his satisfaction level. If the user does not find model appropriate, the program
        ## will loop over to ask user the new value of alpha
        agree=raw_input("\nAre you Satisfied with the smoothening Model? Enter yes/no\n\n")
        if agree=="no":
            alpha=float(raw_input("Enter Alpha\n"))
            exp_smooth(ls1,ls2,alpha,agree)
        else:
            print "\nGraphs have been plotted\n"
            break

 #Below is the function which generates the smoothened prices using the mentioned model              
def exp_smooth(ls1,ls2,alpha,agree):
    smooth=[]
    smooth.append(ls2[0])
    i=len(ls2)
    for x in range(1,i):
        smooth.append(alpha*float(ls2[x-1])+(1-alpha)*float(smooth[x-1]))
    
    #   Below portion of code predicts the stock price at t=9 using the exponential smoothing model
    
    ##This portion of the program will deal with linear regression and find out the 9th value of stock price##
   
    share_price_ex_9 = linear_reg(ls1,smooth)
   
    print "\n*** Predicted price of share using Exponential smoothing model at time t=9 is %.2f ***" % (share_price_ex_9)
    ###----------------------------------------------------------------------------------------------------------------###
    agree="yes"
    draw_graph(ls1,ls2,smooth,alpha,agree)

def linear_reg(ls1,ls2):
 
    # mean of 1st column consiting of numbers and 2nd column of share prices
    #we will calculate mean of only 8 prices and will calculate 9th share price using model
    m_x, m_y = find_avg(ls1), find_avg(ls2)
 
    # calculating cross-deviation and deviation about x
    SS_xy = cross_dev(ls1[:-1],ls2[:-1],m_x,m_y)
    SS_xx = squared_dev(ls1[:-1],m_x)
 
    # calculating regression coefficients
    b1 = SS_xy / SS_xx
    b0 = m_y - b1*m_x
    return b0+b1*9

def find_avg(ls1):
    x=ls1[0:-1]
    sum=0
    i=0
    for i in x:
        sum=float(sum)+float(i)
    return float(sum)/float(len(x))

def cross_dev(list1,list2,m_x,m_y):
    sum=0
    x=list1
    y=list2
    
    for i in range(0,len(x)):
        sum=float(sum)+float((float(x[i])-float(m_x))*(float(y[i])-float(m_y)))
    return float(sum)/float(len(x)-1)

def squared_dev(list3,m_x):
    sum=0
    t=list3
    for i in range(0,len(t)):
        sum=float(sum)+((float(t[i])-float(m_x)**2))
    return float(sum)/float(len(t)-1)


if __name__ == "__main__":
    
    

    ### --------------------Part 1 -------------------------------------------------------------------------------------###
    ### In this part we use the TESLA stock price obtained from NASDAQ website for last 8 months . These prices are contained in the excel file
    ###accompanied with this program in the comressed file-------------------------###
    
    csv_path = os.path.join(sys.path[0], "TSLAHistoricalQuotes.csv")
   
    with open(csv_path, "rb") as f_obj:

        csv_reader(f_obj)

   ###------------------------------Part 2----------------------------------------------------------------------------###
   ###This calls the function which generates a list for smoothened prices which in turn calls the graphing functions   ###
    exp_smooth(ls1,ls2,alpha,agree)  
    

    ###---------------------------Part 3--------------------------------------------------------------------------------###
    #y=b0+b1*x where y is the stock price and x is the numbers in 1st column    
    
    ###This portion of the program will deal with linear regression and find out the 9th value of stock price###s
   
    share_price_9 = linear_reg(ls1,ls2)
   
    print "\nPredicted price of share using regression model at time t=9 is %0.2f \n" % (share_price_9)
    ###----------------------------------------------------------------------------------------------------------------###
